/* role.builder - stworzenei creepa ktÃ³ry w zaleÅ¼oÅ›ci od tego czy ma surowiec czy nie idzie budowaÄ‡ lub jÄ… zbieraÄ‡
przy kaÅ¼dej zmianie zachowania mÃ³wi czyli wyÅ›wietla chmurkÄ™ z wiadomoÅ›ciÄ… o tym czym bÄ™dzie siÄ™ teraz zajmowaÅ‚
rysujÄ… cprzy tym na mapie linie do wyznaczonego celu. */


build(target) // wznoszenie budynku - "traget" > ConstructionSite (in range  3 squares of the creep).
visualizePathStyle // towrzy i rysuje na mapie domyÅ›lnie przeÅºroczystÄ… Å›cieÅ¼kÄ™ creepa, (more options:RoomVisual.poly)
poly(points, [style]) // stylizuje Å›cieÅ¼kÄ™

var roleBuilder = {

    /** @param {Creep} creep **/
    run: function(creep) {

	    if(creep.memory.building && creep.store[RESOURCE_ENERGY] == 0) { 
            // jeÅ¼eli creep nie ma energii mÃ³wi "harvest". i ustawia metode "building" na false
            creep.memory.building = false;
            creep.say('ðŸ”„ harvest');
	    }
	    if(!creep.memory.building && creep.store.getFreeCapacity() == 0) {
            //if creep nie ma wolnego miejsca na energie to mÃ³wi "build"...
	        creep.memory.building = true; // and set building to "true
	        creep.say('ðŸš§ build');
	    }

	    if(creep.memory.building) { // if building == true, zajmuje siÄ™ cyklem budowniczego
	        var targets = creep.room.find(FIND_CONSTRUCTION_SITES); // szuka miejsc na konstrukcje
            if(targets.length) { // jeÅ¼eli jakieÅ› sÄ… to...
                if(creep.build(targets[0]) == ERR_NOT_IN_RANGE) { // jeÅ¼eli creep nie jest w zasiÄ™gu szukanej struktury
                    creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}}); // idzie do niej i rysuje Å›cieÅ¼kÄ™
                }
            }
	    }
	    else { // jeÅ¼eli builind == false, czyli Å¼e creep nie ma surowcÃ³w to idzie zbieraÄ‡
	        var sources = creep.room.find(FIND_SOURCES);
            if(creep.harvzest(sources[0]) == ERR_NOT_IN_RANGE) {
                creep.moveTo(sources[0], {visualizePathStyle: {stroke: '#ffaa00'}});
            }
	    }
	}
};

module.exports = roleBuilder;


// Refine the logic in the module role.harvester.
// Zmiana zachowania zbieraczy na to by teraz przynosili surowce rÃ³wnieÅ¼ do nowych budynkÃ³w: STRUCTURE_EXTENSION


var roleHarvester = {

    /** @param {Creep} creep **/
    run: function(creep) {
	    if(creep.store.getFreeCapacity() > 0) { // standardnowy program zbierania energii gdy wolne miejsce w eq
            var sources = creep.room.find(FIND_SOURCES);
            if(creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {
                creep.moveTo(sources[0], {visualizePathStyle: {stroke: '#ffaa00'}});
            }
        }
        else {
            var targets = creep.room.find(FIND_STRUCTURES, {
                    filter: (structure) => {
                        return (structure.structureType == STRUCTURE_EXTENSION || structure.structureType == STRUCTURE_SPAWN) &&
                            structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;
                    }
            });
            if(targets.length > 0) {
                if(creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {
                    creep.moveTo(targets[0], {visualizePathStyle: {stroke: '#ffffff'}});
                }
            }
        }
	}
};

module.exports = roleHarvester;